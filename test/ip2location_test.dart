import 'package:ip2location/ip2location.dart';
import 'package:test/test.dart';

void main() {
  var notSupported =
      'This parameter is unavailable for selected data file. Please upgrade the data file.';
  var db26IPv4File =
      r'C:\your_folder\IP-COUNTRY-REGION-CITY-LATITUDE-LONGITUDE-ZIPCODE-TIMEZONE-ISP-DOMAIN-NETSPEED-AREACODE-WEATHER-MOBILE-ELEVATION-USAGETYPE-ADDRESSTYPE-CATEGORY-DISTRICT-ASN.BIN';
  var db26IPv6File =
      r'C:\your_folder\IPV6-COUNTRY-REGION-CITY-LATITUDE-LONGITUDE-ZIPCODE-TIMEZONE-ISP-DOMAIN-NETSPEED-AREACODE-WEATHER-MOBILE-ELEVATION-USAGETYPE-ADDRESSTYPE-CATEGORY-DISTRICT-ASN.BIN';
  group('Test Normal IPv4', () {
    test('Normal IPv4 US', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, 'US');
      expect(result.countryLong, 'United States of America');
      expect(result.region, 'California');
      expect(result.city, 'Mountain View');
      expect(result.isp, 'Google LLC');
      expect(result.latitude?.toStringAsFixed(6), '37.386051');
      expect(result.longitude?.toStringAsFixed(6), '-122.083847');
      expect(result.domain, 'google.com');
      expect(result.zipCode, '94035');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '-07:00');
      expect(result.iddCode, '1');
      expect(result.areaCode, '650');
      expect(result.weatherStationCode, 'USCA0746');
      expect(result.weatherStationName, 'Mountain View');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 32.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'A');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'Santa Clara County');
      expect(result.asn, '15169');
      expect(result.asName, 'Google LLC');
      expect(result.asDomain, 'google.com');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '8.8.8.0/24');
    });
    test('Normal IPv4 MY', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('175.144.140.232');
      expect(result.ipAddress, '175.144.140.232');
      expect(result.countryShort, 'MY');
      expect(result.countryLong, 'Malaysia');
      expect(result.region, 'Pulau Pinang');
      expect(result.city, 'Bayan Lepas');
      expect(result.isp, 'Telekom Malaysia Berhad');
      expect(result.latitude?.toStringAsFixed(6), '5.283333');
      expect(result.longitude?.toStringAsFixed(6), '100.266670');
      expect(result.domain, 'tm.net.my');
      expect(result.zipCode, '11900');
      expect(result.netSpeed, 'DSL');
      expect(result.timeZone, '+08:00');
      expect(result.iddCode, '60');
      expect(result.areaCode, '04');
      expect(result.weatherStationCode, 'MYXX0022');
      expect(result.weatherStationName, 'Penang/Bayan Lepas');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 2.0);
      expect(result.usageType, 'ISP');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19-18');
      expect(result.district, 'Barat Daya');
      expect(result.asn, '4788');
      expect(result.asName, 'TM Technology Services Sdn. Bhd.');
      expect(result.asDomain, 'webe.com.my');
      expect(result.asUsageType, 'ISP');
      expect(result.asCIDR, '175.144.128.0/18');
    });
  }, skip: 'Skipping Normal IPv4 tests first.');
  group('Test Normal IPv6', () {
    test('Normal IPv6 AU', () async {
      var ipl = IP2Location(databasePath: db26IPv6File);
      var result = await ipl.getAll('2404:6800:4001:811::200e');
      expect(result.ipAddress, '2404:6800:4001:0811:0000:0000:0000:200E');
      expect(result.countryShort, 'AU');
      expect(result.countryLong, 'Australia');
      expect(result.region, 'New South Wales');
      expect(result.city, 'Sydney');
      expect(result.isp, 'Google LLC');
      expect(result.latitude?.toStringAsFixed(6), '-33.867779');
      expect(result.longitude?.toStringAsFixed(6), '151.207047');
      expect(result.domain, 'google.com');
      expect(result.zipCode, '2000');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '+10:00');
      expect(result.iddCode, '61');
      expect(result.areaCode, '02');
      expect(result.weatherStationCode, 'ASXX0112');
      expect(result.weatherStationName, 'Sydney');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 1.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'City of Sydney');
      expect(result.asn, '15169');
      expect(result.asName, 'Google LLC');
      expect(result.asDomain, 'google.com');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '2404:6800:4001::/48');
    });
    test('Normal IPv6 DE', () async {
      var ipl = IP2Location(databasePath: db26IPv6File);
      var result = await ipl.getAll('2a03:b0c0:3:d0::101:4001');
      expect(result.ipAddress, '2A03:B0C0:0003:00D0:0000:0000:0101:4001');
      expect(result.countryShort, 'DE');
      expect(result.countryLong, 'Germany');
      expect(result.region, 'Hessen');
      expect(result.city, 'Frankfurt am Main');
      expect(result.isp, 'ServerStack Inc.');
      expect(result.latitude?.toStringAsFixed(6), '50.110882');
      expect(result.longitude?.toStringAsFixed(6), '8.681996');
      expect(result.domain, 'serverstack.com');
      expect(result.zipCode, '65931');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '+02:00');
      expect(result.iddCode, '49');
      expect(result.areaCode, '069');
      expect(result.weatherStationCode, 'GMXX0040');
      expect(result.weatherStationName, 'Frankfurt/Main');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 112.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19');
      expect(result.district, 'Regierungsbezirk Darmstadt');
      expect(result.asn, '14061');
      expect(result.asName, 'DigitalOcean LLC');
      expect(result.asDomain, 'digitalocean.com');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '2a03:b0c0:2::/48');
    });
  }, skip: 'Skipping Normal IPv6 tests first.');
  group('Test IPv4-Mapped IPv6', () {
    test('IPv4-Mapped IPv6 ZA', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('::ffff:197.85.191.64');
      expect(result.ipAddress, '0000:0000:0000:0000:0000:FFFF:197.85.191.64');
      expect(result.countryShort, 'ZA');
      expect(result.countryLong, 'South Africa');
      expect(result.region, 'Western Cape');
      expect(result.city, 'Cape Town');
      expect(result.isp, 'Dimension Data');
      expect(result.latitude?.toStringAsFixed(6), '-33.925552');
      expect(result.longitude?.toStringAsFixed(6), '18.422857');
      expect(result.domain, 'dimensiondata.com');
      expect(result.zipCode, '8160');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '+02:00');
      expect(result.iddCode, '27');
      expect(result.areaCode, '021');
      expect(result.weatherStationCode, 'SFXX0010');
      expect(result.weatherStationName, 'Cape Town');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 24.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'City of Cape Town');
      expect(result.asn, '3741');
      expect(result.asName, 'Dimension Data');
      expect(result.asDomain, 'dimensiondata.com');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '197.85.190.0/23');
    });
    test('IPv4-Mapped IPv6 US', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('::FFFF:64.94.62.0');
      expect(result.ipAddress, '0000:0000:0000:0000:0000:FFFF:64.94.62.0');
      expect(result.countryShort, 'US');
      expect(result.countryLong, 'United States of America');
      expect(result.region, 'Florida');
      expect(result.city, 'Miami');
      expect(result.isp, 'zipdata.net');
      expect(result.latitude?.toStringAsFixed(6), '25.774269');
      expect(result.longitude?.toStringAsFixed(6), '-80.193604');
      expect(result.domain, 'zipdata.net');
      expect(result.zipCode, '33101');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '-04:00');
      expect(result.iddCode, '1');
      expect(result.areaCode, '305/786');
      expect(result.weatherStationCode, 'USFL0316');
      expect(result.weatherStationName, 'Miami');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 2.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'Miami-Dade County');
      expect(result.asn, '395951');
      expect(result.asName, 'zipdata.net');
      expect(result.asDomain, 'zipdata.net');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '64.94.62.0/24');
    });
  }, skip: 'Skipping IPv4-mapped IPv6 tests first.');
  group('Test Teredo', () {
    test('Teredo Yahoo', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('2001:0000:4136:e378:8000:63bf:f7fc:ddff');
      expect(result.ipAddress, '2001:0000:4136:E378:8000:63BF:F7FC:DDFF');
      expect(result.countryShort, 'US');
      expect(result.countryLong, 'United States of America');
      expect(result.region, 'California');
      expect(result.city, 'Sunnyvale');
      expect(result.isp, 'Yahoo! Inc.');
      expect(result.latitude?.toStringAsFixed(6), '37.368832');
      expect(result.longitude?.toStringAsFixed(6), '-122.036148');
      expect(result.domain, 'yahoo.com');
      expect(result.zipCode, '94089');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '-07:00');
      expect(result.iddCode, '1');
      expect(result.areaCode, '408/650');
      expect(result.weatherStationCode, 'USCA1116');
      expect(result.weatherStationName, 'Sunnyvale');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 38.0);
      expect(result.usageType, 'SES');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'Santa Clara County');
      expect(result.asn, '1');
      expect(result.asName, 'Level 3 Parent LLC');
      expect(result.asDomain, 'level3.com');
      expect(result.asUsageType, 'ISP');
      expect(result.asCIDR, '8.3.32.0/20');
    });
    test('Teredo Google', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('2001:0:4136:e378:8000:63bf:f7f7:f7f7');
      expect(result.ipAddress, '2001:0:4136:E378:8000:63BF:F7F7:F7F7');
      expect(result.countryShort, 'US');
      expect(result.countryLong, 'United States of America');
      expect(result.region, 'California');
      expect(result.city, 'Mountain View');
      expect(result.isp, 'Google LLC');
      expect(result.latitude?.toStringAsFixed(6), '37.386051');
      expect(result.longitude?.toStringAsFixed(6), '-122.083847');
      expect(result.domain, 'google.com');
      expect(result.zipCode, '94035');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '-07:00');
      expect(result.iddCode, '1');
      expect(result.areaCode, '650');
      expect(result.weatherStationCode, 'USCA0746');
      expect(result.weatherStationName, 'Mountain View');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 32.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'A');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'Santa Clara County');
      expect(result.asn, '15169');
      expect(result.asName, 'Google LLC');
      expect(result.asDomain, 'google.com');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '8.8.8.0/24');
    });
  }, skip: 'Skipping Teredo tests first.');
  group('Test 6to4', () {
    test('6to4 Yahoo', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('2002:0803:2200::0803:2200');
      expect(result.ipAddress, '2002:0803:2200::0803:2200');
      expect(result.countryShort, 'US');
      expect(result.countryLong, 'United States of America');
      expect(result.region, 'California');
      expect(result.city, 'Sunnyvale');
      expect(result.isp, 'Yahoo! Inc.');
      expect(result.latitude?.toStringAsFixed(6), '37.368832');
      expect(result.longitude?.toStringAsFixed(6), '-122.036148');
      expect(result.domain, 'yahoo.com');
      expect(result.zipCode, '94089');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '-07:00');
      expect(result.iddCode, '1');
      expect(result.areaCode, '408/650');
      expect(result.weatherStationCode, 'USCA1116');
      expect(result.weatherStationName, 'Sunnyvale');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 38.0);
      expect(result.usageType, 'SES');
      expect(result.addressType, 'U');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'Santa Clara County');
      expect(result.asn, '1');
      expect(result.asName, 'Level 3 Parent LLC');
      expect(result.asDomain, 'level3.com');
      expect(result.asUsageType, 'ISP');
      expect(result.asCIDR, '8.3.32.0/20');
    });
    test('6to4 Google', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('2002:808:808::');
      expect(result.ipAddress, '2002:808:808::');
      expect(result.countryShort, 'US');
      expect(result.countryLong, 'United States of America');
      expect(result.region, 'California');
      expect(result.city, 'Mountain View');
      expect(result.isp, 'Google LLC');
      expect(result.latitude?.toStringAsFixed(6), '37.386051');
      expect(result.longitude?.toStringAsFixed(6), '-122.083847');
      expect(result.domain, 'google.com');
      expect(result.zipCode, '94035');
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, '-07:00');
      expect(result.iddCode, '1');
      expect(result.areaCode, '650');
      expect(result.weatherStationCode, 'USCA0746');
      expect(result.weatherStationName, 'Mountain View');
      expect(result.mcc, '-');
      expect(result.mnc, '-');
      expect(result.mobileBrand, '-');
      expect(result.elevation, 32.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, 'A');
      expect(result.category, 'IAB19-11');
      expect(result.district, 'Santa Clara County');
      expect(result.asn, '15169');
      expect(result.asName, 'Google LLC');
      expect(result.asDomain, 'google.com');
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, '8.8.8.0/24');
    });
  }, skip: 'Skipping 6to4 tests first.');
  group('Test Invalid IP', () {
    test('Test Invalid 1', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('0.0.0.256');
      expect(result.ipAddress, '0.0.0.256');
      expect(result.countryShort, 'Invalid IP address.');
      expect(result.countryLong, 'Invalid IP address.');
      expect(result.region, 'Invalid IP address.');
      expect(result.city, 'Invalid IP address.');
      expect(result.isp, 'Invalid IP address.');
      expect(result.latitude?.toStringAsFixed(6), null);
      expect(result.longitude?.toStringAsFixed(6), null);
      expect(result.domain, 'Invalid IP address.');
      expect(result.zipCode, 'Invalid IP address.');
      expect(result.netSpeed, 'Invalid IP address.');
      expect(result.timeZone, 'Invalid IP address.');
      expect(result.iddCode, 'Invalid IP address.');
      expect(result.areaCode, 'Invalid IP address.');
      expect(result.weatherStationCode, 'Invalid IP address.');
      expect(result.weatherStationName, 'Invalid IP address.');
      expect(result.mcc, 'Invalid IP address.');
      expect(result.mnc, 'Invalid IP address.');
      expect(result.mobileBrand, 'Invalid IP address.');
      expect(result.elevation, null);
      expect(result.usageType, 'Invalid IP address.');
      expect(result.addressType, 'Invalid IP address.');
      expect(result.category, 'Invalid IP address.');
      expect(result.district, 'Invalid IP address.');
      expect(result.asn, 'Invalid IP address.');
      expect(result.asName, 'Invalid IP address.');
      expect(result.asDomain, 'Invalid IP address.');
      expect(result.asUsageType, 'Invalid IP address.');
      expect(result.asCIDR, 'Invalid IP address.');
    });
    test('Test Invalid 2', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('0.0.0');
      expect(result.ipAddress, '0.0.0');
      expect(result.countryShort, 'Invalid IP address.');
      expect(result.countryLong, 'Invalid IP address.');
      expect(result.region, 'Invalid IP address.');
      expect(result.city, 'Invalid IP address.');
      expect(result.isp, 'Invalid IP address.');
      expect(result.latitude?.toStringAsFixed(6), null);
      expect(result.longitude?.toStringAsFixed(6), null);
      expect(result.domain, 'Invalid IP address.');
      expect(result.zipCode, 'Invalid IP address.');
      expect(result.netSpeed, 'Invalid IP address.');
      expect(result.timeZone, 'Invalid IP address.');
      expect(result.iddCode, 'Invalid IP address.');
      expect(result.areaCode, 'Invalid IP address.');
      expect(result.weatherStationCode, 'Invalid IP address.');
      expect(result.weatherStationName, 'Invalid IP address.');
      expect(result.mcc, 'Invalid IP address.');
      expect(result.mnc, 'Invalid IP address.');
      expect(result.mobileBrand, 'Invalid IP address.');
      expect(result.elevation, null);
      expect(result.usageType, 'Invalid IP address.');
      expect(result.addressType, 'Invalid IP address.');
      expect(result.category, 'Invalid IP address.');
      expect(result.district, 'Invalid IP address.');
      expect(result.asn, 'Invalid IP address.');
      expect(result.asName, 'Invalid IP address.');
      expect(result.asDomain, 'Invalid IP address.');
      expect(result.asUsageType, 'Invalid IP address.');
      expect(result.asCIDR, 'Invalid IP address.');
    });
    test('Test Invalid 3', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('1');
      expect(result.ipAddress, '1');
      expect(result.countryShort, 'Invalid IP address.');
      expect(result.countryLong, 'Invalid IP address.');
      expect(result.region, 'Invalid IP address.');
      expect(result.city, 'Invalid IP address.');
      expect(result.isp, 'Invalid IP address.');
      expect(result.latitude?.toStringAsFixed(6), null);
      expect(result.longitude?.toStringAsFixed(6), null);
      expect(result.domain, 'Invalid IP address.');
      expect(result.zipCode, 'Invalid IP address.');
      expect(result.netSpeed, 'Invalid IP address.');
      expect(result.timeZone, 'Invalid IP address.');
      expect(result.iddCode, 'Invalid IP address.');
      expect(result.areaCode, 'Invalid IP address.');
      expect(result.weatherStationCode, 'Invalid IP address.');
      expect(result.weatherStationName, 'Invalid IP address.');
      expect(result.mcc, 'Invalid IP address.');
      expect(result.mnc, 'Invalid IP address.');
      expect(result.mobileBrand, 'Invalid IP address.');
      expect(result.elevation, null);
      expect(result.usageType, 'Invalid IP address.');
      expect(result.addressType, 'Invalid IP address.');
      expect(result.category, 'Invalid IP address.');
      expect(result.district, 'Invalid IP address.');
      expect(result.asn, 'Invalid IP address.');
      expect(result.asName, 'Invalid IP address.');
      expect(result.asDomain, 'Invalid IP address.');
      expect(result.asUsageType, 'Invalid IP address.');
      expect(result.asCIDR, 'Invalid IP address.');
    });
    test('Test Invalid 4', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAll('A');
      expect(result.ipAddress, 'A');
      expect(result.countryShort, 'Invalid IP address.');
      expect(result.countryLong, 'Invalid IP address.');
      expect(result.region, 'Invalid IP address.');
      expect(result.city, 'Invalid IP address.');
      expect(result.isp, 'Invalid IP address.');
      expect(result.latitude?.toStringAsFixed(6), null);
      expect(result.longitude?.toStringAsFixed(6), null);
      expect(result.domain, 'Invalid IP address.');
      expect(result.zipCode, 'Invalid IP address.');
      expect(result.netSpeed, 'Invalid IP address.');
      expect(result.timeZone, 'Invalid IP address.');
      expect(result.iddCode, 'Invalid IP address.');
      expect(result.areaCode, 'Invalid IP address.');
      expect(result.weatherStationCode, 'Invalid IP address.');
      expect(result.weatherStationName, 'Invalid IP address.');
      expect(result.mcc, 'Invalid IP address.');
      expect(result.mnc, 'Invalid IP address.');
      expect(result.mobileBrand, 'Invalid IP address.');
      expect(result.elevation, null);
      expect(result.usageType, 'Invalid IP address.');
      expect(result.addressType, 'Invalid IP address.');
      expect(result.category, 'Invalid IP address.');
      expect(result.district, 'Invalid IP address.');
      expect(result.asn, 'Invalid IP address.');
      expect(result.asName, 'Invalid IP address.');
      expect(result.asDomain, 'Invalid IP address.');
      expect(result.asUsageType, 'Invalid IP address.');
      expect(result.asCIDR, 'Invalid IP address.');
    });
  }, skip: 'Skipping Invalid IP tests first.');
  group('Test Individual Fields', () {
    test('Test Country Short', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getCountryShort('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, 'US');
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Country Long', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getCountryLong('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, 'United States of America');
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Region', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getRegion('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, 'California');
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test City', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getCity('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, 'Mountain View');
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test ISP', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getIsp('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, 'Google LLC');
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Latitude', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getLatitude('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '37.386051');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Longitude', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getLongitude('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '-122.083847');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Domain', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getDomain('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, 'google.com');
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test ZIP Code', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getZipCode('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, '94035');
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Net Speed', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getNetSpeed('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, 'T1');
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Time Zone', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getTimeZone('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, '-07:00');
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test IDD Code', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getIddCode('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, '1');
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Area Code', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAreaCode('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, '650');
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Weather Station Code', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getWeatherStationCode('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, 'USCA0746');
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Weather Station Name', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getWeatherStationName('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, 'Mountain View');
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test MCC', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getMcc('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, '-');
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test MNC', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getMnc('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, '-');
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Mobile Brand', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getMobileBrand('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, '-');
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Elevation', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getElevation('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 32.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Usage Type', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getUsageType('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, 'DCH');
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Address Type', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAddressType('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, 'A');
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test Category', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getCategory('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, 'IAB19-11');
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test District', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getDistrict('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, 'Santa Clara County');
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test ASN', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAsn('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, '15169');
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test AS Name', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAsName('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, 'Google LLC');
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test AS Domain', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAsDomain('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, 'google.com');
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, notSupported);
    });
    test('Test AS Usage Type', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAsUsageType('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, 'DCH');
      expect(result.asCIDR, notSupported);
    });
    test('Test AS CIDR', () async {
      var ipl = IP2Location(databasePath: db26IPv4File);
      var result = await ipl.getAsCidr('8.8.8.8');
      expect(result.ipAddress, '8.8.8.8');
      expect(result.countryShort, notSupported);
      expect(result.countryLong, notSupported);
      expect(result.region, notSupported);
      expect(result.city, notSupported);
      expect(result.isp, notSupported);
      expect(result.latitude?.toStringAsFixed(6), '0.000000');
      expect(result.longitude?.toStringAsFixed(6), '0.000000');
      expect(result.domain, notSupported);
      expect(result.zipCode, notSupported);
      expect(result.netSpeed, notSupported);
      expect(result.timeZone, notSupported);
      expect(result.iddCode, notSupported);
      expect(result.areaCode, notSupported);
      expect(result.weatherStationCode, notSupported);
      expect(result.weatherStationName, notSupported);
      expect(result.mcc, notSupported);
      expect(result.mnc, notSupported);
      expect(result.mobileBrand, notSupported);
      expect(result.elevation, 0.0);
      expect(result.usageType, notSupported);
      expect(result.addressType, notSupported);
      expect(result.category, notSupported);
      expect(result.district, notSupported);
      expect(result.asn, notSupported);
      expect(result.asName, notSupported);
      expect(result.asDomain, notSupported);
      expect(result.asUsageType, notSupported);
      expect(result.asCIDR, '8.8.8.0/24');
    });
  }, skip: 'Skipping Individual Field tests first.');
}
